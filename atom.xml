<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MARzhangyy</title>
  <icon>https://www.gravatar.com/avatar/09d256299de097bb74a95838ee8b9d55</icon>
  <subtitle>2018年是一个需要特别特别努力和幸运的一年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-25T08:30:22.442Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhangyanyue</name>
    <email>1984970332@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandas</title>
    <link href="http://yoursite.com/2018/02/20/pandas/"/>
    <id>http://yoursite.com/2018/02/20/pandas/</id>
    <published>2018-02-20T03:34:18.000Z</published>
    <updated>2018-02-25T08:30:22.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Series对象"><a href="#1-Series对象" class="headerlink" title="1. Series对象"></a>1. Series对象</h2><font face="黑体" size="4">Series对象用来表示一维数组结构，跟数组类似，但多了一些额外的功能。</font><p>(1) 调用Series()构造函数，把要存放在Series对象中的数据以<font color="#0099ff">数组</font>形式传入。</p><blockquote><p>import pandas as pd<br>import numpy as np<br>a = pd.Series([1,2,3,4])</p></blockquote><p>(2) 输出结果左侧<strong><em>index</em></strong>是一列标签，右侧是标签对应的元素<strong><em>values</em></strong><br>(3) 选择内部元素，可以使用元素对应的标签，把标签放到数组中。</p><blockquote><p>a[[‘0’,’1’]]</p></blockquote><p>(4) 用Numpy数组或其他Series对象定义新Series对象</p><blockquote><p>b = np.array([1,2,3])<br>a1 = pd.Series(b)</p></blockquote><p>(5)  <font color="#0099ff">unique()</font>函数可弄清Series对象包含多少个不同的元素，其结果返回一个包含Series去重后的元素; <font color="#00FF00">value_counts()</font>函数返回各个不同的元素，计算每个元素在Series中出现的次数。</p><blockquote><p>a.unique()<br>a.value_counts()</p></blockquote><p>(6)  <font color="#0099ff">isin()</font>函数判断给定的元素是否包含在数据结构之中，isin()函数返回<strong>布尔值</strong>。</p><blockquote><p>a.isin([1])</p></blockquote><p>(7)  <font color="#0099ff">NaN</font>(Not a Number,非数值)，创建数据结构时，可为数组中元素缺失的项输入np.NaN；<font color="#0000CD">isnull()</font>和 <font color="#0000CD">notnull()</font>函数用来识别没有对应元素的索引时非常好用,作为筛选函数。<br>(8) 可以用事先定义好的字典来创建Series对象。索引数组为字典的键。可以单独指定索引，若遇缺失值，pandas就会为其添加NaN。<br>(9) Series对象之间的运算，只对<font color="#0099ff">标签相同</font>的元素运算，其余的也被添加到新对象中，它们的值均为NaN。</p><h2 id="2-DataFrame对象"><a href="#2-DataFrame对象" class="headerlink" title="2.DataFrame对象"></a>2.DataFrame对象</h2> <font face="黑体" size="4">DataFrame对象可以理解为一个由Series组成的字典。DataFrame对象有两个索引数组，第一个数组与行相关，与Series对象的索引数组相似，第二个数组和列相关，每一列的名称为字典的键。DataFrame对象用columns选项指定需要的列，也可指定列名称的顺序。在未指明索引的情况下，Series对象和DataFrame对象，都会自动添加一列从0开始的数值作为索引，用标签作为索引，则把标签放到数组中，赋给index选项。</font><p>(1) 定义DataFrame对象<br>传递一个dict对象给DataFrame()构造函数，dict对象以每一列的名称作为键，每个键都有一个数组作为值。</p><blockquote><p>import pandas as pd<br>data = {‘color’:[‘blue’,’yellow’,’green’],<br>        ‘price’:[3,4,5]}<br>frame = pd.DataFrame(data)</p></blockquote><p>抛开dict对象，定义一个构造函数，参数顺序：数据矩阵、index选项和columns选项 。</p><blockquote><p>frame1 = pd.DataFrame(np.arange(16).reshape((4,4)),<br>                        index = [‘red’,’blue’,’yellow’,’green’],<br>                        columns = [‘pen’,’pencil’,’ruler’,’box’])</p></blockquote><p>(2) 选取元素<br>调用columns属性可知DataFrame对象所有列的名称，调用index属性可知DataFrame对象所有行的名称，调用values属性可获取存储在数据结构中的元素。</p><blockquote><p>frame = pd.DataFrame(data)<br>print(frame.columns)<br>print(frame.index)<br>print(frame.values)</p></blockquote><p>把 <font color="#0099ff">一列的名称作为索引</font>可选择这一列的内容</p><blockquote><p>frame[‘price’]</p></blockquote><p>或 <font color="#0000CD">用列名称作为DataFrame实例的属性</font>，也可选择这一列的内容</p><blockquote><p>frame.price</p></blockquote><p>还可通过指定 <font color="#1E90FF">索引范围(切片)</font>来选取</p><blockquote><p>frame[0:2]</p></blockquote><p>依次指定元素所在的列名称、行的索引值或标签，可获取存储在DataFrame中的一个元素。</p><blockquote><p>frame[‘color’][‘2’]</p></blockquote><p>(3) 赋值<br>可用 <font color="#1E90FF">name属性</font>为二级结构columns属性和index属性指定标签。</p><blockquote><p>frame.index.name = ‘id’;frame.columns.name = ‘item’</p></blockquote><p>指定DataFrame实例新列的名称，为其赋值可添加列。</p><blockquote><p>frame[‘new’] = 10</p></blockquote><p>若更新一列的内容，需要把一个数组赋给这一列。给某一列的其中几个索引所对应的值赋新值，没有被赋新值的元素会填充为NaN。</p><blockquote><p>frame[‘price’] = [4,5,6]</p></blockquote><p>(4) 元素所属关系<br>isin()函数判断一组元素是否属于Series对象，同样适用DataFrame对象。</p><p>(5) 删除一列<br>使用del命令，可以删除一整列的所有数据。</p><blockquote><p>del frame[‘new’]</p></blockquote><p>(6) 筛选</p><blockquote><p>frame[frame &lt; 12]<br>返回的对象包含所有小于12的数字，不符合条件的替换为NaN。</p></blockquote><p>(7) DataFrame转置<br>调用T属性就能得到DataFrame对象的转置形式。</p><blockquote><p>frame.T</p></blockquote><h2 id="3-index对象"><a href="#3-index对象" class="headerlink" title="3.index对象"></a>3.index对象</h2><p>(1) index对象的方法<br>idxmin()和idxmax()函数分别返回索引值最小和最大的元素。</p><blockquote><p>frame.idxmin()<br>frame.idxmax()</p></blockquote><p>运用is_unique属性，可判断数据结构中是否存在重复的索引项，返回bool值。</p><blockquote><p>frame.index.is_unique</p></blockquote><p>(2) 更换索引<br>数据结构一旦声明，index对象就不能改变，但pandas的<font color="#1E90FF">reindex()</font>函数可更换Series对象的索引，根据新标签序列，重新调整原Series对象元素，生成一个新的Series对象。更换索引时，可以调整索引序列中各标签的顺序，删除或增加标签，增加新标签，pandas会增加NaN作为其元素。</p><blockquote><p>frame.reindex([‘one’,’two’,’three’,’four’])</p></blockquote><p>当索引列缺失值时，常见的需求为插值，以得到一个完整的序列，方法是用<font color="#0099ff">reindex()</font>函数，method选项值可为ffill或bfill。当为ffill时，对于新插入的索引项，其元素为前面索引编号比它小的那一项的元素，当为bfill时，是新插入索引后面的元素。</p><blockquote><p>frame.reindex([‘one’,’two’,’three’,’four’],method = ‘ffill’)</p></blockquote><p>(3) 删除<br>删除操作drop()函数，将想删除的标签作为drop()函数的参数，删除多项时，传入一个由多标签组成的数组。在Series对象中操作。</p><blockquote><p>ser = pd.Series(np.arange(3),index = [‘red’,’blue’,’yellow’])<br>ser.drop(‘red’)</p></blockquote><p>要删除DataFrame对象中的元素，需要指定元素两个轴的轴标签，传入行的索引可以删除行。要删除列，需要指定列的索引，还需用axis选项指定从哪个轴删除元素，按列的方向删除，axis的值为1。</p><blockquote><p>frame.drop([‘blue’,’yellow’])<br>frame.drop([‘pen’,’pencil’],axis = 1)</p></blockquote><p>(4) 算术和数据对齐<br>DataFrame对象之间的运算，行和列都要执行对齐操作。例:有两个DataFrame对象，frame1和frame2</p><blockquote><p>frame1 + frame2</p></blockquote><p>也可写为frame1.add(frame2)—–算术运算方法</p><p>(5) 按行或按列执行操作的函数<br>用<font color="#0099ff">apply()</font>函数可以在DataFrame对象上使用自定义的函数，可返回Series对象或DataFrame对象。</p><p>(6) 统计函数<br>数组的大多数统计函数对DataFrame对象依旧有效，deccribe()函数能够计算多个统计量。</p><blockquote><p>frame.deccribe()</p></blockquote><p>(7) 排序<br>对于Series对象，pandas的sort_index()函数可按照索引的升序排列的顺序对标签进行排序，若按照降序排列，只需将sort_index()函数的参数设为sort_index(ascending=False)。</p><blockquote><p>ser.sort_index()<br>ser.sort_index(ascending=False)</p></blockquote><p>对于DataFrame对象，可分别对两条轴中的任意一条进行排序。对索引进行排序，sort_index()函数可以解决，若按列进行排序，只需将sort_index()函数的参数设定为sort_index(axis = 1)。</p><blockquote><p>frame.sort_index()<br>frame.sort_index(axis = 1)</p></blockquote><p><strong>以上为对索引进行排序，下面为对数据元素进行排序。</strong><br>对Series对象排序，使用sort_values()函数，对DataFrame对象排序，使用sort_values()函数，参数需要用by选项指定根据哪一列进行排序。</p><blockquote><p>ser.sort_values()<br>frame.sort_values(by = ‘pen’)</p></blockquote><p>sort_values()对多列进行排序，把这些列的名称放到数组中，赋给参数by。</p><blockquote><p>frame.sort_values(by = [‘pen’,’pencil’])</p></blockquote><p>(8) 相关性和协方差<br>相关性和协方差是非常重要的两个统计量，函数分别为corr()和cov()。涉及两个Series对象，单个DataFrame对象。</p><h2 id="4-NaN数据"><a href="#4-NaN数据" class="headerlink" title="4.NaN数据"></a>4.NaN数据</h2><p>(1) 为元素赋NaN值<br>运用numpy的np.NaN(或np.nan)即可。</p><p>(2) 过滤NaN<br>对于Series对象，dropna()函数可以删除所有的NaN值，另一种方法是用notnull()函数作为选取元素的条件，直接实现过滤。</p><blockquote><p>ser.dropna()<br>ser[ser.notnull()]</p></blockquote><p>DataFrame对象若用dropna()方法，只要行或列有一个NaN元素，该行或该列的元素都会被删除。可使用how选项，指定其值为all，只删除所有元素均为NaN的行或列。</p><blockquote><p>frame.dropna(how = ‘all’)</p></blockquote><p>(3) 为NaN元素填充其他值<br>将所有NaN值替换为同一个元素，fillna()函数。将不同列的NaN替换为不同的元素，依次指定列名称及要替换成的元素即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Series对象&quot;&gt;&lt;a href=&quot;#1-Series对象&quot; class=&quot;headerlink&quot; title=&quot;1. Series对象&quot;&gt;&lt;/a&gt;1. Series对象&lt;/h2&gt;&lt;font face=&quot;黑体&quot; size=&quot;4&quot;&gt;Series对象用来表示一维
      
    
    </summary>
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://yoursite.com/2018/02/01/numpy/"/>
    <id>http://yoursite.com/2018/02/01/numpy/</id>
    <published>2018-02-01T10:27:53.000Z</published>
    <updated>2018-02-20T03:00:33.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-numpy中的基本数据类型"><a href="#1-numpy中的基本数据类型" class="headerlink" title="1.numpy中的基本数据类型"></a>1.numpy中的基本数据类型</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>bool</td><td>用一个字节存储的布尔类型（True或False）</td></tr><tr><td>inti</td><td>由所在平台决定其大小的整数（一般为int32或int64）</td></tr><tr><td>int8</td><td>一个字节大小，-128 至 127</td></tr><tr><td>int16</td><td>整数，-32768 至 32767</td></tr><tr><td>int32</td><td>整数，-2<sup>31</sup> 至 2<sup>32</sup>-1</td></tr><tr><td>int64</td><td>整数，-2<sup>63</sup>  至 2<sup>63</sup> - 1</td></tr><tr><td>uint8</td><td>无符号整数，0 至 255</td></tr><tr><td>uint16</td><td>无符号整数，0 至 65535</td></tr><tr><td>uint32</td><td>无符号整数，0 至 2<sup>32</sup> - 1</td></tr><tr><td>uint64</td><td>无符号整数，0 至 2<sup>64</sup> - 1</td></tr><tr><td>float16</td><td>半精度浮点数：16位，正负号1位，指数5位，精度10位</td></tr><tr><td>float32</td><td>单精度浮点数：32位，正负号1位，指数8位，精度23位</td></tr><tr><td>float64或float</td><td>双精度浮点数：64位，正负号1位，指数11位，精度52位</td></tr><tr><td>complex64</td><td>复数，分别用两个32位浮点数表示实部和虚部</td></tr><tr><td>complex128或complex</td><td>复数，分别用两个64位浮点数表示实部和虚部</td></tr></tbody></table><h3 id="2-用于操作单个数组的常用函数"><a href="#2-用于操作单个数组的常用函数" class="headerlink" title="2.用于操作单个数组的常用函数"></a>2.用于操作单个数组的常用函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>sort(x)</td><td>对x进行从小到大排序</td></tr><tr><td>unique(x)</td><td>计算x中的唯一元素，并返回有序结果</td></tr><tr><td>abs、fabs</td><td>计算整数、浮点数或复数的绝对值。对于复数数值，可以使用更快的fabs</td></tr><tr><td>square</td><td>计算各元素的平方</td></tr><tr><td>sqrt</td><td>计算各元素的平方根</td></tr><tr><td>cos、sin、tan</td><td>三角函数</td></tr><tr><td>arccos、arcsin、arctan</td><td>反三角函数</td></tr></tbody></table><h3 id="3-用于操作两个或多个数组的方法"><a href="#3-用于操作两个或多个数组的方法" class="headerlink" title="3.用于操作两个或多个数组的方法"></a>3.用于操作两个或多个数组的方法</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>add</td><td>将数组中对应的元素相加</td></tr><tr><td>subtract</td><td>从第一个数组中减去第二个数组中的元素</td></tr><tr><td>multiply</td><td>数组元素相乘</td></tr><tr><td>power</td><td>两个数组A,B，计算A的B次方</td></tr><tr><td>mod</td><td>元素级的求模运算</td></tr></tbody></table><h3 id="4-数学统计方法"><a href="#4-数学统计方法" class="headerlink" title="4.数学统计方法"></a>4.数学统计方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>mean</td><td>算术平均数。零长度的数组为NaN</td></tr><tr><td>std、var</td><td>分别为标准差和方差</td></tr><tr><td>min，max</td><td>最小值和最大值</td></tr><tr><td>cumsum</td><td>所有元素的累积和</td></tr><tr><td>cumprod</td><td>所有元素的累积积</td></tr><tr><td>argmin、argmax</td><td>分别计算最小值和最大值的索引</td></tr></tbody></table><h3 id="5-线性函数的常用方法"><a href="#5-线性函数的常用方法" class="headerlink" title="5.线性函数的常用方法"></a>5.线性函数的常用方法</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>dot</td><td>矩阵乘法</td></tr><tr><td>trace</td><td>计算对角线元素的和</td></tr><tr><td>det</td><td>计算矩阵行列式</td></tr><tr><td>inv</td><td>计算方阵的逆</td></tr><tr><td>pinv</td><td>计算矩阵的逆</td></tr></tbody></table><h3 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h3><blockquote><p>>&gt;&gt; import numpy as np     <strong><em>调用numpy库</em></strong><br>>&gt;&gt; a = np.array([1,2,3])    <strong><em>创建数组，且大小固定，不可变</em></strong><br>>&gt;&gt; a<br>array([1, 2, 3])<br>>&gt;&gt; a.dtype    <strong><em>查看新建的ndarray属于哪种数据类型</em></strong><br>dtype(‘int32’)<br>>&gt;&gt; a.ndim    <strong><em>数组的维统称为轴，得出轴数量（秩）</em></strong><br>1<br>>&gt;&gt; a.size     <strong><em>数组的长度</em></strong><br>3<br>>&gt;&gt; a.shape   <strong><em>数组的型</em></strong><br>(3,)<br>>&gt;&gt; b = np.array([[1,2,3],[2,3,4]])  <strong><em>创建二维数组</em></strong><br>>&gt;&gt; b<br>array([[1, 2, 3],<br>       [2, 3, 4]])<br>>&gt;&gt; c = np.array(((1,2,4),(4,5,6)))<br>>&gt;&gt; c<br>array([[1, 2, 4],<br>       [4, 5, 6]])<br>>&gt;&gt; d = np.array([(1,2,3),[4,5,6],(7,8,9)])<br>>&gt;&gt; d<br>array([[1, 2, 3],<br>       [4, 5, 6],<br>       [7, 8, 9]])<br>>&gt;&gt; f = np.array([(1,2,3),[4,5,6],(7,8,9)],dtype = complex)   <strong><em>complex为复数类型</em></strong><br>>&gt;&gt; f<br>array([[ 1.+0.j,  2.+0.j,  3.+0.j],<br>       [ 4.+0.j,  5.+0.j,  6.+0.j],<br>       [ 7.+0.j,  8.+0.j,  9.+0.j]])<br>>&gt;&gt; np.zeros((3,3))   <strong><em>生成全0的数组</em></strong><br>array([[ 0.,  0.,  0.],<br>     [ 0.,  0.,  0.],<br>     [ 0.,  0.,  0.]])<br>>&gt;&gt; np.ones((3,3))    <strong><em>生成全1的数组</em></strong><br>array([[ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.]])</p><h4 id="empty-函数，随机生成数组，相当于未进行初始化的数组。不同平台调用会生成不同的结果。"><a href="#empty-函数，随机生成数组，相当于未进行初始化的数组。不同平台调用会生成不同的结果。" class="headerlink" title="empty()函数，随机生成数组，相当于未进行初始化的数组。不同平台调用会生成不同的结果。"></a>empty()函数，随机生成数组，相当于未进行初始化的数组。不同平台调用会生成不同的结果。</h4><p>(2,3,2)：2个3行2列的数组。<br>>&gt;&gt;np.empty((2,3,2))<br>>&gt;&gt; np.arange(0,10)   <strong><em>遍历输出</em></strong><br>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])<br>>&gt;&gt; np.arange(0,10,3)  <strong><em>类似于列表，不同的是列表的大小可以改变</em></strong><br>array([0, 3, 6, 9])<br>>&gt;&gt; np.arange(0,12).reshape(3,4) <strong><em>生成3行4列的数组</em></strong><br>array([[ 0,  1,  2,  3],<br>       [ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11]])<br>>&gt;&gt; np.random.random((3,3))   <strong><em>产生随机数</em></strong><br>array([[ 0.24683936,  0.49185243,  0.30907375],<br>       [ 0.73396599,  0.56047708,  0.07133656],<br>       [ 0.46251468,  0.00697587,  0.9234071 ]])<br>>&gt;&gt; A = np.ones((3,3))<br>>&gt;&gt; A<br>array([[ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.]])<br>>&gt;&gt; B = np.arange(0,9).reshape(3,3)<br>>&gt;&gt; B<br>array([[0, 1, 2],<br>       [3, 4, 5],<br>       [6, 7, 8]])<br>>&gt;&gt; np.dot(A,B)   <strong><em>dot表示两个数组的矩阵积</em></strong><br>array([[  9.,  12.,  15.],<br>       [  9.,  12.,  15.],<br>       [  9.,  12.,  15.]])<br>>&gt;&gt; A.dot(B)   <strong><em>矩阵积的第二种表示形式</em></strong><br>array([[  9.,  12.,  15.],<br>       [  9.,  12.,  15.],<br>       [  9.,  12.,  15.]])</p><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><p>>&gt;&gt; g = np.arange(4)<br>>&gt;&gt; g<br>array([0, 1, 2, 3])<br>>&gt;&gt; g += 1<br>>&gt;&gt; g<br>array([1, 2, 3, 4])<br>>&gt;&gt; g -= 2<br>>&gt;&gt; g<br>array([-1,  0,  1,  2])<br>>&gt;&gt; h = np.arange(1,5)<br>>&gt;&gt; h<br>array([1, 2, 3, 4])<br>>&gt;&gt; np.sqrt(h) <strong><em>开平方</em></strong><br>array([ 1.        ,  1.41421356,  1.73205081,  2.        ])<br>>&gt;&gt; np.sin(h)<br>array([ 0.84147098,  0.90929743,  0.14112001, -0.7568025 ])<br>>&gt;&gt; np.log(h)<br>array([ 0.        ,  0.69314718,  1.09861229,  1.38629436])<br>>&gt;&gt; k = np.array([3,4,5,6,7])<br>>&gt;&gt; k.sum()  <strong><em>求和</em></strong><br>25<br>>&gt;&gt; k.min()  <strong><em>最小值</em></strong><br>3<br>>&gt;&gt; k.max()  <strong><em>最大值</em></strong><br>7<br>>&gt;&gt; k.mean() <strong><em>平均值</em></strong><br>5.0<br>>&gt;&gt; k.std()  <strong><em>标准差</em></strong><br>1.4142135623730951<br>>&gt;&gt; l = np.arange(10,19).reshape((3,3))<br>>&gt;&gt; l<br>array([[10, 11, 12],<br>       [13, 14, 15],<br>       [16, 17, 18]])<br>>&gt;&gt; np.apply_along_axis(np.mean,axis = 0,arr = l)  <strong><em>遍历每个元素，求每一列的平均值</em></strong><br>array([ 13.,  14.,  15.])<br>>&gt;&gt; np.apply_along_axis(np.mean,axis = 1,arr = l)   <strong><em>求每一行的平均值</em></strong><br>array([ 11.,  14.,  17.])<br>>&gt;&gt; m = np.random.random((4,4))<br>>&gt;&gt; m<br>array([[ 0.08614139,  0.7518394 ,  0.45196265,  0.68611206],<br>       [ 0.62034675,  0.52529466,  0.72000524,  0.90689477],<br>       [ 0.19201244,  0.4555663 ,  0.16900424,  0.76753676],<br>       [ 0.17563723,  0.6348416 ,  0.38004357,  0.92354182]])<br>>&gt;&gt; b = np.random.random(12)<br>>&gt;&gt; b<br>array([ 0.56181788,  0.16499619,  0.6756252 , …,  0.33440496,<br>        0.75068239,  0.08420334])<br>>&gt;&gt; b.shape = (3,4)   <strong><em>把元组赋给数组shape的属性</em></strong><br>>&gt;&gt; b<br>array([[ 0.56181788,  0.16499619,  0.6756252 ,  0.37539411],<br>       [ 0.53771165,  0.96114175,  0.58014551,  0.05676748],<br>       [ 0.31388188,  0.33440496,  0.75068239,  0.08420334]])<br>>&gt;&gt; b.ravel()         <strong><em>把二维数组变为一维数组</em></strong><br>array([ 0.56181788,  0.16499619,  0.6756252 , …,  0.33440496,<br>        0.75068239,  0.08420334])<br>>&gt;&gt; b.transpose()     <strong><em>行列转换</em></strong><br>array([[ 0.56181788,  0.53771165,  0.31388188],<br>       [ 0.16499619,  0.96114175,  0.33440496],<br>       [ 0.6756252 ,  0.58014551,  0.75068239],<br>       [ 0.37539411,  0.05676748,  0.08420334]])<br>>&gt;&gt; A = np.zeros((3,3))<br>>&gt;&gt; B = np.ones((3,3))<br>>&gt;&gt; np.vstack((A,B))    <strong><em>执行垂直入栈操作</em></strong><br>array([[ 0.,  0.,  0.],<br>       [ 0.,  0.,  0.],<br>       [ 0.,  0.,  0.],<br>       [ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.],<br>       [ 1.,  1.,  1.]])<br>>&gt;&gt; np.hstack((A,B))   <strong><em>执行水平入栈操作</em></strong><br>array([[ 0.,  0.,  0.,  1.,  1.,  1.],<br>       [ 0.,  0.,  0.,  1.,  1.,  1.],<br>       [ 0.,  0.,  0.,  1.,  1.,  1.]])</p><h4 id="用于多个数组之间的栈操作"><a href="#用于多个数组之间的栈操作" class="headerlink" title="用于多个数组之间的栈操作"></a>用于多个数组之间的栈操作</h4><p>>&gt;&gt; d = np.array([1,2,3])<br>>&gt;&gt; e = np.array([4,5,6])<br>>&gt;&gt; f = np.array([7,8,9])<br>>&gt;&gt; np.column_stack((d,e,f))   <strong><em>把一维数组作为列压入栈</em></strong><br>array([[1, 4, 7],<br>       [2, 5, 8],<br>       [3, 6, 9]])<br>>&gt;&gt; np.row_stack((d,e,f))   <strong><em>把一维数组作为行压入栈</em></strong><br>array([[1, 2, 3],<br>       [4, 5, 6],<br>       [7, 8, 9]])<br>>&gt;&gt; C = np.arange(16).reshape((4,4))<br>>&gt;&gt; C<br>array([[ 0,  1,  2,  3],<br>       [ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11],<br>       [12, 13, 14, 15]])<br>>&gt;&gt; [D,E] = np.hsplit (C,2)   <strong><em>将数组水平切分</em></strong><br>>&gt;&gt; D<br>array([[ 0,  1],<br>       [ 4,  5],<br>       [ 8,  9],<br>       [12, 13]])<br>>&gt;&gt; E<br>array([[ 2,  3],<br>       [ 6,  7],<br>       [10, 11],<br>       [14, 15]])<br>>&gt;&gt; [D,E] = np.vsplit (C,2)   <strong><em>将数组垂直切分</em></strong><br>>&gt;&gt; D<br>array([[0, 1, 2, 3],<br>       [4, 5, 6, 7]])<br>>&gt;&gt; E<br>array([[ 8,  9, 10, 11],<br>       [12, 13, 14, 15]])</p><h4 id="Numpy中，所有赋值运算不会为数组和数组中的任何元素创建副本。把数组a赋给数组b，b只是a的另外一种调用方式。"><a href="#Numpy中，所有赋值运算不会为数组和数组中的任何元素创建副本。把数组a赋给数组b，b只是a的另外一种调用方式。" class="headerlink" title="Numpy中，所有赋值运算不会为数组和数组中的任何元素创建副本。把数组a赋给数组b，b只是a的另外一种调用方式。"></a>Numpy中，所有赋值运算不会为数组和数组中的任何元素创建副本。把数组a赋给数组b，b只是a的另外一种调用方式。</h4><p>>&gt;&gt; import numpy as np<br>>&gt;&gt; a = np.array([1,2,3,4])<br>>&gt;&gt; b = a<br>>&gt;&gt; b<br>array([1, 2, 3, 4])<br>>&gt;&gt; a[2] = 5<br>>&gt;&gt; b<br>array([1, 2, 5, 4])<br>>&gt;&gt; a<br>array([1, 2, 5, 4])</p><h4 id="利用copy-函数可以生成一份完整的副本，得到一个不同的数组。"><a href="#利用copy-函数可以生成一份完整的副本，得到一个不同的数组。" class="headerlink" title="利用copy()函数可以生成一份完整的副本，得到一个不同的数组。"></a>利用copy()函数可以生成一份完整的副本，得到一个不同的数组。</h4><p>>&gt;&gt; d = a.copy()<br>>&gt;&gt; d<br>array([0, 2, 5, 4])<br>>&gt;&gt; a[2] = 3<br>>&gt;&gt; a<br>array([0, 2, 3, 4])<br>>&gt;&gt; d<br>array([0, 2, 5, 4])</p><h4 id="数组切片操作返回的对象只是原数组的视图。"><a href="#数组切片操作返回的对象只是原数组的视图。" class="headerlink" title="数组切片操作返回的对象只是原数组的视图。"></a>数组切片操作返回的对象只是原数组的视图。</h4><p>>&gt;&gt; l = np.arange(10,19).reshape((3,3))<br>>&gt;&gt; l<br>array([[10, 11, 12],<br>       [13, 14, 15],<br>       [16, 17, 18]])<br>>&gt;&gt; l[2,2]   <strong><em>表示第3行3列的元素，从0开始</em></strong><br>18<br>>&gt;&gt; l[1,2]<br>15<br>>&gt;&gt; l[0,:]   <strong><em>第0行的元素</em></strong><br>array([10, 11, 12])<br>>&gt;&gt; l[:,0]   <strong><em>第0列的元素</em></strong><br>array([10, 13, 16])<br>>&gt;&gt; l[0:2,0:2]     <strong><em>截取前两行前两列的元素</em></strong><br>array([[10, 11],<br>       [13, 14]])<br>>&gt;&gt; l[[0,2],0:2]   <strong><em>截取前两列中第0行、第2行的元素</em></strong><br>array([[10, 11],<br>       [16, 17]])<br>>&gt;&gt; c = a[0:2]<br>>&gt;&gt; c<br>array([1, 2])<br>>&gt;&gt; a[0] = 0<br>>&gt;&gt; c<br>array([0, 2])<br>>&gt;&gt; d = np.array([[1,2,3],[4,5,6],[7,8,9]])<br>>&gt;&gt; d<br>array([[1, 2, 3],<br>       [4, 5, 6],<br>       [7, 8, 9]])</p><h4 id="切片：一个逗号表示一个维度。-2表示数组的前两行-0-1行-，1：数组的1列到最后一列。"><a href="#切片：一个逗号表示一个维度。-2表示数组的前两行-0-1行-，1：数组的1列到最后一列。" class="headerlink" title="切片：一个逗号表示一个维度。:2表示数组的前两行(0,1行)，1：数组的1列到最后一列。"></a>切片：一个逗号表示一个维度。:2表示数组的前两行(0,1行)，1：数组的1列到最后一列。</h4><p>>&gt;&gt; d[:2,1:]<br>array([[2, 3],<br>       [5, 6]])<br>>&gt;&gt; d[:2]<br>array([[1, 2, 3],<br>       [4, 5, 6]])</p><h4 id="可以利用切片为数组赋值。"><a href="#可以利用切片为数组赋值。" class="headerlink" title="可以利用切片为数组赋值。"></a>可以利用切片为数组赋值。</h4><p>>&gt;&gt; d[1:,2:] = 0<br>>&gt;&gt; d<br>array([[1, 2, 3],<br>       [4, 5, 0],<br>       [7, 8, 0]])</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-numpy中的基本数据类型&quot;&gt;&lt;a href=&quot;#1-numpy中的基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;1.numpy中的基本数据类型&quot;&gt;&lt;/a&gt;1.numpy中的基本数据类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;

      
    
    </summary>
    
      <category term="numpy" scheme="http://yoursite.com/categories/numpy/"/>
    
    
      <category term="numpy" scheme="http://yoursite.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="http://yoursite.com/2018/01/26/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/26/hexo搭建博客/</id>
    <published>2018-01-26T05:00:22.000Z</published>
    <updated>2018-01-26T06:52:10.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo搭建博客基本命令"><a href="#hexo搭建博客基本命令" class="headerlink" title="hexo搭建博客基本命令"></a>hexo搭建博客基本命令</h2><h3 id="添加相关页面"><a href="#添加相关页面" class="headerlink" title="添加相关页面"></a>添加相关页面</h3><p>打开终端，进入博客根站点目录下，例：添加标签页，输入以下内容：</p><blockquote><p>hexo new page tags</p></blockquote><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><blockquote><p>hexo g</p></blockquote><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><blockquote><p>hexo s</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>打开终端，进入public</p><blockquote><p>hexo d </p></blockquote><p>但往往hexo d不起作用，我的是这样，所以还是要手动push</p><blockquote><p>git config user.name “”<br>git config user.email “”<br>git add *<br>git commit -m “”<br>git remote add origin git@github.com:你的GitHub用户名/本地仓库</p></blockquote><p>此时若提示，fatal: remote origin already exists,则</p><ol><li><p>先删除远程Git仓库</p><blockquote><p>git remote rm origin</p></blockquote></li><li><p>再添加远程Git仓库</p><blockquote><p>git remote add origin git@github.com:你的GitHub用户名/本地仓库</p></blockquote></li></ol><p>接着执行</p><blockquote><p>git push origin master</p></blockquote><p>当远程库和本地库不同步时，会提示，error：failed to push some refes to ….,则</p><ol><li>先pull,将远程库文件同步下来<blockquote><p>git pull origin master</p></blockquote></li><li>再push，执行推送<blockquote><p>git push origin master</p></blockquote></li></ol><p>Finish!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo搭建博客基本命令&quot;&gt;&lt;a href=&quot;#hexo搭建博客基本命令&quot; class=&quot;headerlink&quot; title=&quot;hexo搭建博客基本命令&quot;&gt;&lt;/a&gt;hexo搭建博客基本命令&lt;/h2&gt;&lt;h3 id=&quot;添加相关页面&quot;&gt;&lt;a href=&quot;#添加相关页面&quot;
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2018/01/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/01/02/我的第一篇博客/</id>
    <published>2018-01-02T11:38:18.000Z</published>
    <updated>2018-01-24T09:26:16.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="之后会陆续更新python数据分析有关内容"><a href="#之后会陆续更新python数据分析有关内容" class="headerlink" title="之后会陆续更新python数据分析有关内容"></a>之后会陆续更新python数据分析有关内容</h2><ol><li>numpy库</li><li>pandas库</li><li>深入pandas</li><li>pandas数据读写</li><li>用matplotlib实现数据可视化</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;之后会陆续更新python数据分析有关内容&quot;&gt;&lt;a href=&quot;#之后会陆续更新python数据分析有关内容&quot; class=&quot;headerlink&quot; title=&quot;之后会陆续更新python数据分析有关内容&quot;&gt;&lt;/a&gt;之后会陆续更新python数据分析有关内容&lt;/
      
    
    </summary>
    
    
      <category term="我的第一篇博客" scheme="http://yoursite.com/tags/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
